#!/usr/bin/env python
# This program logs data from speclab instruments.
#
# Timothy Crone (tjcrone@gmail.com)

# default device ports
mb_port='/dev/tty.Bluetooth-Modem'
ir_port='/dev/tty.Bluetooth-Modem'
#mb_port = '/dev/tty.usbserial-FT97SF3N'
#ir_port = '/dev/tty.ir_port'

# imports
import sys, os, serial, time, argparse, signal

# signal handler function
running=True
def signal_handler(signal, frame):
  running=False
  clean_quit()
signal.signal(signal.SIGINT, signal_handler)

# clean up and quit function
def clean_quit():
  sys.stderr.write("\b\bCleaning up ... ")
  if f: f.close()
  if mb: mb.ser.close()
  if ir: ir.ser.close()
  sys.stderr.write("done.\n")
  raise SystemExit

# default output file function
def default_output():
  output = time.strftime('%Y_%m_%d_%H%M%S.log', time.gmtime())
  return output

# parse arguments
parser = argparse.ArgumentParser(description='Log data from SpecLab instruments.')
parser.add_argument("-d", dest="device", nargs='+', metavar=('name', 'port'),
  default=[], action='append', help="device [and port] to log (options: mb, ir)")
parser.add_argument("-i", dest="interval", metavar="seconds", type=int, default=5,
  help="interval between log entries (default: 5)")
parser.add_argument("-n", dest="samples", metavar="samples", type=int, default=[],
  help="number of samples to collect before quitting")
parser.add_argument("-o", dest="output", metavar="filename", type=str,
  default=default_output(), help="output file name")
args = parser.parse_args()

# default devices
if not args.device:
  args.device = [['mb', mb_port], ['ir', ir_port]]

# error check output file
if os.path.isdir(args.output):
  parser.error("argument -o: output file argument '%s' is a directory" % args.output)
if os.path.exists(args.output):
  parser.error("argument -o: output file '%s' already exists" % args.output)
try:
  f = open(args.output, 'a')
  f.close()
  os.remove(args.output)
except:
  raise

# error check device arguments
for dev in args.device:
  if len(dev)>2:
    parser.error("argument -d: device option takes a maximum of two arguments")
  if not os.path.exists(dev[1]):
    parser.error("argument -d: device path '%s' does not exist" % dev[1])

# simple device object for namespace convenience
class Device(object):
  pass

# create requested devices
mb = []
ir = []
for dev in args.device:
  if dev[0] == 'mb':
    # create  mass balance serial object
    mb = Device()
    mb.name = 'mass balance'
    mb.ser = serial.Serial(baudrate=9600, parity=serial.PARITY_NONE,
      stopbits=serial.STOPBITS_TWO, bytesize=serial.SEVENBITS, timeout=0.25)
    if len(dev)>1:
      mb.ser.port = dev[1]
    else:
      mb.ser.port = mb_port
  elif dev[0] == 'ir':
    # create  ir pyrometer serial object
    ir = Device()
    ir.name = 'ir pyrometer'
    ir.ser = serial.Serial(baudrate=9600, parity=serial.PARITY_NONE,
      stopbits=serial.STOPBITS_ONE, bytesize=serial.EIGHTBITS, timeout=0.1)
    if len(dev)>1:
      ir.ser.port = dev[1]
    else:
      ir.ser.port = ir_port
  else:
    parser.error("argument -d: the first device argument must be either 'mb' or 'ir'")

# connector routine
def connect(device):
  sys.stderr.write("Connecting to %s ... " % device.name)
  num_tries = 10
  n = 0
  while True:
    try:
      test=1 # TESTING
      #device.ser.open()
    except:
      if sys.exc_info()[1].errno == 16: # loop for num_tries on resource busy error
        n = n+1
        if n == num_tries:
          sys.stderr.write("failed.\nError opening %s port '%s' after %i tries: Resource busy.\n" %
            (device.name, device.ser.port, num_tries))
          raise SystemExit
        else:
          time.sleep(1)
          continue
      else:
        raise # raise the SerialException on any other error
    sys.stderr.write("done.\n")
    break

# connect to defined devices
if mb: connect(mb)
if ir: connect(ir)

# function to check if device value is a valid float
def check_float(value):
  try:
    float(value)
    return True
  except ValueError:
    return False

# initialize some counters
total_seconds = 0 # total number of seconds elapsed
total_samples = 0 # total number of samples logged
n = 0 # number of subsamples collected on the interval

# open output file
f = open(args.output, 'w')

# write logging started message
sys.stderr.write("Logging data to %s every %i s.\n" % (args.output, args.interval))
sys.stderr.write("Press Ctrl-C to quit logging.\n")

# loop to log data
while running:
  # quit if requested number of samples have been collected
  if args.samples:
    if total_samples == args.samples:
      clean_quit()

  # quit if requested logging time has elapsed 


  # sleep for one second
  time.sleep(1 - time.time() % 1)

  # clear mb input buffer (needs to be done often)
  #if mb: mb.ser.flushInput()

  # increment counters
  total_seconds = total_seconds+1
  n = n+1

  # log sample according to the logging inverval
  if n == args.interval or total_seconds == 1:
    total_samples = total_samples+1
    n = 0

    # get sample time
    sample_time = time.strftime('%Y,%m,%d,%H,%M,%S', time.gmtime())

    # get mb data
    if mb:
      mb_data = []
      #mb.ser.flushInput()
      #mb_data = mb.ser.readline().strip()
      #mb_data = mb.ser.readline().strip() # get two lines in case the first one is truncated
      # format mb value
      if len(mb_data)>0:
        mb_value = mb_data.split(' ')[0]
        # check if mb_value is a float
        if not check_float(mb_value):
          mb_value = "ND"
      else:
        mb_value = 'ND'
    else:
      mb_value = 'ND'

    # get ir data
    if ir:
      ir_data = []
      #ir.ser.flushInput()
      #ir.ser.write('TEM ?\n')
      #ir_data = ir.ser.readline().strip()
      # format ir value
      if len(ir_data)>0:
        if 'ERROR' in ir_data:
          ir_value = ir_data
        else:
          ir_value = ir_data.split(' ')[0]
          if not check_float(ir_value):
            ir_value = "ND"
      else:
        ir_value = 'ND'
    else:
      ir_value = 'ND'

    # write results to screen
    #sys.stdout.write('%s,%s,%s\n' % (sample_time, mb_value, ir_value))
    #sys.stdout.flush()

    # write results to file
    f.write('%s,%s,%s\n' % (sample_time, mb_value, ir_value))
    f.flush()
